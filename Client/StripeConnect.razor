@using Tres.Stripes.Services
@using Tres.Stripes.Models

@namespace Tres.Stripes.Modules
@inherits ModuleBase
@inject NavigationManager NavigationManager
@inject HttpClient http
@inject SiteState sitestate


@inject Blazored.SessionStorage.ISessionStorageService sessionStorage


<button class="btn btn-primary" @onclick="ConnectStripe">Setup Stripe Connect</button>


@*<h3>Edit Profile</h3>
    @if (currentUser == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <AuthorizeView>
            <Authorized>
                <div>
                    <h4>Stripe Connect</h4>
                    <div>
                        @if (currentUser.StripeConnectId == null)
                        {
                            <button class="btn btn-primary" @onclick="ConnectStripe">Setup Stripe Connect</button>
                        }
                    </div>
                </div>
            </Authorized>
        </AuthorizeView>
    }*@


@if (_Stripes == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <ActionLink Action="Add" Security="SecurityAccessLevel.Edit" Text="Add Stripe" />
    <br />
    <br />
    @if (@_Stripes.Count != 0)
    {
        <Pager Items="@_Stripes" Format="Grid">
            <Header>
                <div class="col"><strong>Stripes</strong></div>
            </Header>
            <Row>
                <div class="col">
                    <ActionLink Action="Edit" Parameters="@($"id=" + context.StripeId.ToString())" />
                    <ActionDialog Header="Delete Stripe" Message="@("Are You Sure You Wish To Delete The " + context.Name + " Stripe?")" Action="Delete" Security="SecurityAccessLevel.Edit" Class="btn btn-danger" OnClick="@(async () => await Delete(context))" />
                    @context.Name
                </div>
            </Row>
        </Pager>
    }
    else
    {
        <p>No Stripes To Display</p>
    }
}

<!-- The content below is for informational purposes only and can be safely removed -->

@code {
    IStripeService StripeService;
    List<Stripe> _Stripes;

    StripeUser CurrentUser;

    string StripeUrl = "http://localhost:5000/VerifyStripeConnect";
    string ClientId = "ABC123";

    private async Task ConnectStripe()
    {
        var state = Guid.NewGuid();
        string baseUrl = "https://connect.stripe.com/express/oauth/authorize";
        string redirectUri = "http://localhost:5000/VerifyStripeConnect";

        string clientId = ClientId;   //StripeConfiguration.ClientId;
        string businessType = "individual";

        await sessionStorage.SetItemAsync("stripeState", state.ToString());

        string stripeAuthUrl = $"{baseUrl}?" +
            $"redirect_uri={redirectUri}&" +
            $"client_id={clientId}&" +
            $"stripe_user[business_type]={businessType}&" +
            $"stripe_user[email]={CurrentUser.Email}&" +
            $"stripe_user[first_name]={CurrentUser.FirstName}&" +
            $"stripe_user[last_name]={CurrentUser.LastName}&" +
            $"state={state}";

        NavigationManager.NavigateTo(stripeAuthUrl, true);
      
    }



    protected override async Task OnInitializedAsync()
    {
        try
        {
            StripeService = new StripeService(http, sitestate, NavigationManager);
            _Stripes = await StripeService.GetStripesAsync(ModuleState.ModuleId);
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading Stripe {Error}", ex.Message);
            AddModuleMessage("Error Loading Stripe", MessageType.Error);
        }
    }

    private async Task Delete(Stripe Stripe)
    {
        try
        {
            await StripeService.DeleteStripeAsync(Stripe.StripeId);
            await logger.LogInformation("Stripe Deleted {Stripe}", Stripe);
            _Stripes = await StripeService.GetStripesAsync(ModuleState.ModuleId);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Deleting Stripe {Stripe} {Error}", Stripe, ex.Message);
            AddModuleMessage("Error Deleting Stripe", MessageType.Error);
        }
    }
}